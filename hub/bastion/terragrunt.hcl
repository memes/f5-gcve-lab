dependencies {
  paths = [
    "${get_repo_root()}/foundations/",
    "../vpc/",
  ]
}

dependency "foundations" {
  config_path = "${get_repo_root()}/foundations/"
  mock_outputs = {
    prefix = "mock-prefix"
  }
}

dependency "vpc" {
  config_path = "../vpc/"
  mock_outputs = {
    prefix = "mock-prefix"
  }
}

include "root" {
  path   = find_in_parent_folders()
  expose = true
}

include "env" {
  path   = find_in_parent_folders("env.hcl")
  expose = true
}

locals {
  region = include.root.inputs.regions[0]
}

terraform {
  source = "tfr://registry.terraform.io/memes/private-bastion/google?version=3.0.1"
}

remote_state = include.root.remote_state

inputs = {
  project_id            = try(include.root.inputs.network_project_id, include.root.inputs.project_id)
  name                  = format("%s-%s", dependency.foundations.outputs.prefix, include.env.locals.name)
  proxy_container_image = "ghcr.io/memes/terraform-google-private-bastion/forward-proxy:3.0.1"
  labels                = try(include.root.inputs.labels, {})
  subnet                = dependency.vpc.outputs.subnets_by_region[local.region].self_link,
  zone                  = dependency.foundations.outputs.zones[local.region][0]
  bastion_targets = {
    cidrs = [
      dependency.vpc.outputs.subnets_by_region[local.region].primary_ipv4_cidr,
      "192.168.0.0/16",
    ]
    service_accounts = null
    priority         = 900
  }
  members = distinct(concat(try(include.root.inputs.gcve_admins, []), try(include.root.inputs.gcve_viewers, [])))
}
